import type React from 'react';
import { useEffect } from 'react';
import './Step.css';
import type { StepProps } from '../../types';

const InputLinking: React.FC<StepProps> = ({ data, onDataChange }) => {
  useEffect(() => {
    // Update parent component when data changes
    onDataChange({ linking: data.linking || '' });
  }, []);

  const handleLinkingChange = (
    e: React.ChangeEvent<HTMLTextAreaElement>,
  ): void => {
    onDataChange({ linking: e.target.value });
  };

  return (
    <div className="step-container">
      <div className="step-header">
        <h3>Step 3: Input Linking</h3>
        <p>
          Review and edit the linking data automatically generated by the
          prelinker service.
        </p>
      </div>

      <div className="step-content">
        <div className="form-group">
          <label htmlFor="linking-input">Linking Data (Auto-generated)</label>
          <textarea
            id="linking-input"
            value={data.linking || ''}
            onChange={handleLinkingChange}
            placeholder="Linking data will be automatically generated from the prelinker service..."
            rows={8}
            className="form-control"
          />
        </div>

        <div className="text-info">
          <p>
            <strong>Automatic Linking:</strong> The prelinker service has
            automatically generated linking data from your CoNLL-U input.
          </p>
          <p>
            <strong>Manual Editing:</strong> You can review and edit the linking
            data above if needed.
          </p>
          <p>
            <strong>Linking Format:</strong> The data connects tokens with
            external linguistic resources, knowledge bases, or lexical
            databases.
          </p>
          <p>
            <strong>Example Format:</strong>
          </p>
          <pre className="code-example">
            {`token_id:1 -> resource:LiLaLemma -> lemma_id:latin_cat
token_id:2 -> resource:LiLaBrill -> brill_id:brill_cat_noun
token_id:3 -> resource:LiLaIGVL -> igvl_id:igvl_sit_verb`}
          </pre>
        </div>
      </div>
    </div>
  );
};

export default InputLinking;
